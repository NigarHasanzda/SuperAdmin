import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { 
  logoutAdmin, 
  checkTokenExpiration, 
  clearExpiredToken 
} from "../../Redux/Features/Login";
import "./AdminPanel.css";

// Səhifə Komponentləri
import Ads from "./Ads";
import Category from "./Category";
import Role from "./Role";
import Persons from "./Persons";
import Businesses from "./Businesses";
import { Product } from "./Product";
import { Notification } from "./Notification";
import Profiles from "./Profiles";
import Report from "./Report";
import WheelService from "./WheelService";
import Log from "./Log";

// Redux Fetch Funksiyaları
import { fetchUsers } from "../../Redux/Features/AllUserSlice";
import { fetchAllBusinesses } from "../../Redux/Features/Businesses";
import { fetchProducts } from "../../Redux/Features/ProductSlice";
import { fetchAds } from "../../Redux/Features/AdsSlice";
import { clearRefreshState, refreshToken } from "../../Redux/Features/RefreshSlice";

const Home = () => {
  const dispatch = useDispatch();
  const { token, user } = useSelector((state) => state.auth);
  const [activePage, setActivePage] = useState('dashboard');
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  // 🔹 Refresh token yalnız token expired və ya 403 error zamanı
  useEffect(() => {
    const callRefreshIfNeeded = async () => {
      if (!token) return;

      try {
        if (checkTokenExpiration()) {
          console.log("Token expired, refresh edilir...");
          await dispatch(refreshToken()).unwrap();
        }
      } catch (err) {
        console.log("Refresh token alınmadı:", err);
        dispatch(clearRefreshState());
        window.location.href = "/login";
      }
    };

    callRefreshIfNeeded();
  }, [dispatch, token]);

  // 🔹 Token expiration yoxlaması səhifə yüklənəndə
  useEffect(() => {
    if (!token) return;

    if (checkTokenExpiration()) {
      dispatch(clearExpiredToken());
      alert("Sessiya müddəti bitdi. Yenidən daxil olun.");
      window.location.href = "/login";
    }
  }, [dispatch, token]);

  const handleLogout = () => {
    if (window.confirm("Çıxış etmək istədiyinizə əminsiniz?")) {
      dispatch(logoutAdmin());
    }
  };

  const menuItems = [
    { id: 'dashboard', label: 'Dashboard', icon: '📊' },
    { id: 'ads', label: 'Reklamlar', icon: '📢' },
    { id: 'category', label: 'Kateqoriyalar', icon: '📋' },
    { id: 'roles', label: 'Rollar', icon: '👥' },
    { id: 'persons', label: 'Şəxslər', icon: '👤' },
    { id: 'businesses', label: 'Bizneslər', icon: '🏢' },
    { id: 'products', label: 'Məhsullar', icon: '📦' },
    { id: 'notification', label: 'Bildirişlər', icon: '🔔' },
    { id: 'profiles', label: 'Profillər', icon: '👤' },
    { id: 'report', label: 'Hesabatlar', icon: '📈' },
    { id: 'wheel', label: 'Çarx Xidməti', icon: '⚙️' },
    { id: 'logs', label: 'Loglar', icon: '📝' }
  ];

  const renderContent = () => {
    switch (activePage) {
      case 'ads': return <Ads />;
      case 'category': return <Category />;
      case 'roles': return <Role />;
      case 'persons': return <Persons />;
      case 'businesses': return <Businesses />;
      case 'products': return <Product />;
      case 'notification': return <Notification />;
      case 'profiles': return <Profiles />;
      case 'report': return <Report />;
      case 'wheel': return <WheelService />;
      case 'logs': return <Log />;
      default: return <DashboardHome setActivePage={setActivePage} />;
    }
  };

  return (
    <div className="admin-container">
      <div className="sidebar" style={{ width: sidebarCollapsed ? '70px' : '250px' }}>
        <div className="sidebar-header">
          <button 
            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
            className="toggle-button"
          >
            {sidebarCollapsed ? '☰' : '✕'}
          </button>
          {!sidebarCollapsed && <h2 className="logo">Admin Panel</h2>}
        </div>
        
        <nav className="nav">
          {menuItems.map((item) => (
            <button
              key={item.id}
              onClick={() => setActivePage(item.id)}
              className={`menu-item ${activePage === item.id ? 'active' : ''}`}
              title={sidebarCollapsed ? item.label : ''}
            >
              <span className="menu-icon">{item.icon}</span>
              {!sidebarCollapsed && <span className="menu-label">{item.label}</span>}
            </button>
          ))}
        </nav>

        <div className="sidebar-footer">
          <button onClick={handleLogout} className="logout-button">
            <span className="menu-icon">🚪</span>
            {!sidebarCollapsed && <span>Çıxış</span>}
          </button>
        </div>
      </div>

      <div className="main-content" style={{ marginLeft: sidebarCollapsed ? '70px' : '250px' }}>
        <div className="header">
          <h1 className="page-title">
            {menuItems.find(item => item.id === activePage)?.label || 'Dashboard'}
          </h1>
          <div className="user-info">
            <span>Xoş gəlmisiniz, {user?.name || 'Admin'}</span>
            <button onClick={handleLogout} className="header-logout-button">
              Çıxış
            </button>
          </div>
        </div>

        <div className="content">
          {renderContent()}
        </div>
      </div>
    </div>
  );
};

// ===========================================
// Dashboard Home Komponenti
// ===========================================
const DashboardHome = ({ setActivePage }) => {
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);

  const users = useSelector((state) => state.users.list || []);
  const businesses = useSelector((state) => state.businesses.all || []);
  const products = useSelector((state) => state.products.list || {});
  const ads = useSelector((state) => state.ads.list || []);

  const userNumber = Array.isArray(users) ? users.length : (users.content?.length || 0);
  const businessLength = Array.isArray(businesses) ? businesses.length : (businesses.content?.length || 0);
  const productLength = Array.isArray(products) ? products.length : (products.content?.length || 0);
  const allAdsLength = Array.isArray(ads) ? ads.length : (ads.content?.length || 0);

  const [currentTime, setCurrentTime] = useState(new Date());
  const [loginTime] = useState(new Date()); 

  useEffect(() => {
    dispatch(fetchUsers());
    dispatch(fetchAllBusinesses());
    dispatch(fetchProducts());
    dispatch(fetchAds());
  }, [dispatch]);

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const formatTime = (date) => date.toLocaleTimeString('az-AZ', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
  const formatDate = (date) => date.toLocaleDateString('az-AZ', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

  const getGreeting = () => {
    const hour = loginTime.getHours();
    if (hour >= 5 && hour < 12) return "Sabahınız xeyir";
    if (hour >= 12 && hour < 17) return "Günortanız xeyir";
    if (hour >= 17 && hour < 22) return "Axşamınız xeyir";
    return "Gecəniz xeyir";
  };

  const getWelcomeMessage = () => {
    const hour = loginTime.getHours();
    const minute = loginTime.getMinutes();
    const timeStr = `${hour.toString().padStart(2,'0')}:${minute.toString().padStart(2,'0')}`;
    if (hour >= 5 && hour < 9) return `Admin panelinizə ${timeStr}-da daxil oldunuz. Səhər işlərinizə uğurlar diləyirik!`;
    if (hour >= 9 && hour < 12) return `Admin panelinizə ${timeStr}-da daxil oldunuz. Səhər saatlarında sisteminizdə hər şey qaydasındadır.`;
    if (hour >= 12 && hour < 17) return `Admin panelinizə ${timeStr}-da daxil oldunuz. Günortadan sonra da aktiv iş gününüz davam edir!`;
    if (hour >= 17 && hour < 22) return `Admin panelinizə ${timeStr}-da daxil oldunuz. Axşam saatlarında da sisteminizdə hər şey nəzarətdədir.`;
    return `Admin panelinizə ${timeStr}-da daxil oldunuz. Gecə geç saatlarda da aktivsiniz, əla!`;
  };

  return (
    <div className="dashboard-container">
      <div className="dashboard-hero">
        <div className="hero-content">
          <div className="welcome-info">
            <h1 className="hero-title">{getGreeting()}, {user?.name || 'Admin'}! 👋</h1>
            <p className="hero-subtitle">{getWelcomeMessage()}</p>
            <div className="user-details">
              <div className="user-detail-item">
                <span className="detail-icon">👤</span>
                <span>{user?.name} {user?.surname}</span>
              </div>
              <div className="user-detail-item">
                <span className="detail-icon">📧</span>
                <span>{user?.email}</span>
              </div>
              <div className="user-detail-item">
                <span className="detail-icon">📞</span>
                <span>{user?.phone || 'Məlumat yoxdur'}</span>
              </div>
            </div>
          </div>
          <div className="time-info">
            <div className="current-time">{formatTime(currentTime)}</div>
            <div className="current-date">{formatDate(currentTime)}</div>
          </div>
        </div>
      </div>

      <div className="metrics-grid">
        <div className="metric-card users" style={{ '--metric-color': '#3b82f6' }}>
          <div className="metric-icon">👥</div>
          <div className="metric-info">
            <div className="metric-value">{userNumber}</div>
            <div className="metric-label">Ümumi İstifadəçi</div>
            <div className="metric-trend" style={{ background: 'rgba(59, 130, 246, 0.2)', border: '1px solid rgba(59, 130, 246, 0.5)', color: '#3b82f6' }}>Aktiv sistem</div>
          </div>
        </div>
        <div className="metric-card businesses" style={{ '--metric-color': '#10b981' }}>
          <div className="metric-icon">🏢</div>
          <div className="metric-info">
            <div className="metric-value">{businessLength}</div>
            <div className="metric-label">Təsdiqlənmiş Biznes</div>
            <div className="metric-trend" style={{ background: 'rgba(16, 185, 129, 0.2)', border: '1px solid rgba(16, 185, 129, 0.5)', color: '#10b981' }}>
                {businessLength > 0 ? 'Aktiv bazada' : 'Məlumat yoxdur'}
            </div>
          </div>
        </div>
        <div className="metric-card products" style={{ '--metric-color': '#f59e0b' }}>
          <div className="metric-icon">📦</div>
          <div className="metric-info">
            <div className="metric-value">{productLength}</div>
            <div className="metric-label">Məhsul Sayı</div>
            <div className="metric-trend" style={{ background: 'rgba(245, 158, 11, 0.2)', border: '1px solid rgba(245, 158, 11, 0.5)', color: '#f59e0b' }}>
                {productLength > 0 ? 'Məhsul bazası aktivdir' : 'Məlumat yoxdur'}
            </div>
          </div>
        </div>
        <div className="metric-card revenue" style={{ '--metric-color': '#ef4444' }}>
          <div className="metric-icon">📢</div>
          <div className="metric-info">
            <div className="metric-value">{allAdsLength}</div>
            <div className="metric-label">Reklam Sayı</div>
            <div className="metric-trend" style={{ background: 'rgba(239, 68, 68, 0.2)', border: '1px solid rgba(239, 68, 68, 0.5)', color: '#ef4444' }}>
                {allAdsLength > 0 ? 'Aktiv reklamlar' : 'Reklam yoxdur'}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;













// notificationSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import api from "../../../api";

// Fetch
export const fetchBroadcasts = createAsyncThunk(
  "notifications/fetchBroadcasts",
  async () => {
    const res = await api.get("/api/notifications");
    return res.data;
  }
);

// Send
export const sendBroadcast = createAsyncThunk(
  "notifications/sendBroadcast",
  async (data) => {
    const res = await api.post("/api/notifications/admin/broadcast", data);
    return res.data;
  }
);

// DELETE
export const deleteBroadcast = createAsyncThunk(
  "notifications/deleteBroadcast",
  async (id) => {
    await api.delete(`/api/notifications/${id}`);
    return id; // ID-ni qaytarırıq ki, reducer-də list-dən çıxarda bilək
  }
);

const notificationsSlice = createSlice({
  name: "notifications",
  initialState: { list: [], loading: false, error: null },
  reducers: {},
  extraReducers: (builder) => {
    builder
      // FETCH
      .addCase(fetchBroadcasts.pending, (state) => { state.loading = true; state.error = null; })
      .addCase(fetchBroadcasts.fulfilled, (state, action) => { state.loading = false; state.list = action.payload; })
      .addCase(fetchBroadcasts.rejected, (state, action) => { state.loading = false; state.error = action.error.message; })

      // SEND
      .addCase(sendBroadcast.pending, (state) => { state.loading = true; state.error = null; })
      .addCase(sendBroadcast.fulfilled, (state, action) => { 
        state.loading = false; 
        if (action.payload) {
          state.list = [action.payload, ...state.list]; // 🔹 yeni bildiriş dərhal görünsün
        }
      })
      .addCase(sendBroadcast.rejected, (state, action) => { state.loading = false; state.error = action.error.message; })

      // DELETE
      .addCase(deleteBroadcast.pending, (state) => { state.loading = true; state.error = null; })
      .addCase(deleteBroadcast.fulfilled, (state, action) => {
        state.loading = false;
        state.list = state.list.filter(n => n.id !== action.payload);
      })
      .addCase(deleteBroadcast.rejected, (state, action) => { state.loading = false; state.error = action.error.message; });
  },
});

export default notificationsSlice.reducer;
























import React, { useEffect, useState, useMemo } from "react";
import { useDispatch, useSelector } from "react-redux";
import { deleteBroadcast, fetchBroadcasts, sendBroadcast } from "../../Redux/Features/notificationSlice";
import "./Notification.css";

export const Notification = () => {
  const dispatch = useDispatch();
  const { list, loading, error } = useSelector((state) => state.notifications);

  const [title, setTitle] = useState("");
  const [desc, setDesc] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState("date");
  const [sortOrder, setSortOrder] = useState("desc");
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showSendForm, setShowSendForm] = useState(false);

  // Debug üçün
  useEffect(() => {
    console.log("📩 Notification List:", list);
  }, [list]);

  // Fetch all notifications on mount
  useEffect(() => {
    dispatch(fetchBroadcasts());
  }, [dispatch]);

  // Utility functions
  const handleClearSearch = () => {
    setSearchTerm('');
  };

  const handleNotificationDetail = (notification) => {
    setSelectedNotification(notification);
    setShowDetailModal(true);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Tarix məlum deyil';
    const date = new Date(dateString);
    return date.toLocaleDateString('az-AZ', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'SUCCESS': return '✅';
      case 'WARNING': return '⚠️';
      case 'ERROR': return '❌';
      case 'INFO': return 'ℹ️';
      default: return '📢';
    }
  };

  const getNotificationColor = (type) => {
    switch (type) {
      case 'SUCCESS': return '#10b981';
      case 'WARNING': return '#f59e0b';
      case 'ERROR': return '#ef4444';
      case 'INFO': return '#3b82f6';
      default: return '#8b5cf6';
    }
  };

  // Form submit
const handleSend = async (e) => {
  e.preventDefault();
  if (!title.trim() || !desc.trim()) {
    return alert("Başlıq və açıqlama doldurulmalıdır!");
  }

  try {
    const resultAction = await dispatch(sendBroadcast({ title, description: desc }));

    if (sendBroadcast.fulfilled.match(resultAction)) {
      // ✅ Yeni bildiriş artıq slice-də list-in əvvəlinə əlavə olunur
      setTitle("");
      setDesc("");
      setShowSendForm(false);
    } else {
      alert("Bildiriş göndərilə bilmədi!");
    }
  } catch (err) {
    alert("Xəta baş verdi: " + err.message);
  }
};


  // Filter and sort notifications
  const filteredAndSortedNotifications = useMemo(() => {
    if (!Array.isArray(list)) return [];
    
    let filtered = list.filter(item => {
      if (!item || !item.title) return false;
      
      const searchMatch = searchTerm === '' || 
        (item.title || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
        (item.description || '').toLowerCase().includes(searchTerm.toLowerCase());
      
      return searchMatch;
    });

    // Sort
    filtered.sort((a, b) => {
      let aValue = a[sortBy] || '';
      let bValue = b[sortBy] || '';
      
      if (sortBy === 'date') {
        aValue = new Date(a.createdAt || a.date || 0);
        bValue = new Date(b.createdAt || b.date || 0);
      } else if (sortBy === 'id') {
        aValue = parseInt(aValue) || 0;
        bValue = parseInt(bValue) || 0;
      } else {
        aValue = aValue.toString().toLowerCase();
        bValue = bValue.toString().toLowerCase();
      }
      
      if (sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return filtered;
  }, [list, searchTerm, sortBy, sortOrder]);

  // Statistics
  const stats = useMemo(() => {
    const notifications = Array.isArray(list) ? list.filter(item => item && item.title) : [];
    return {
      total: notifications.length,
      today: notifications.filter(n => {
        const date = new Date(n.createdAt || n.date);
        const today = new Date();
        return date.toDateString() === today.toDateString();
      }).length,
      thisWeek: notifications.filter(n => {
        const date = new Date(n.createdAt || n.date);
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        return date >= weekAgo;
      }).length,
      filtered: filteredAndSortedNotifications.length
    };
  }, [list, filteredAndSortedNotifications]);

  const renderNotificationCard = (notification) => (
    <div key={notification.id || Math.random()} className="notification-card" onClick={() => handleNotificationDetail(notification)}>
      <div className="notification-header">
        <div className="notification-icon" style={{ backgroundColor: getNotificationColor(notification.type) }}>
          {getNotificationIcon(notification.type)}
        </div>
        <div className="notification-info">
          <h3 className="notification-title">{notification.title}</h3>
          <div className="notification-meta">
            <span className="notification-id">🆔 ID: {notification.id || 'N/A'}</span>
            <span className="notification-date">📅 {formatDate(notification.createdAt || notification.date)}</span>
          </div>
        </div>
        <div className="notification-status">
          <div className="status-badge active">📢 Göndərildi</div>
          <button
  className="status-badge active"
  style={{
    color:"white"
  }}
  onClick={(e) => {
    e.stopPropagation(); // modal açılmasın
    if(window.confirm("Bildirişi silmək istədiyinizə əminsiniz?")) {
      dispatch(deleteBroadcast(notification.id));
    }
  }}
>
  🗑️ Sil
</button>

        </div>
      </div>
      
      <div className="notification-content">
        <p className="notification-description">
          {notification.description && notification.description.length > 100 
            ? `${notification.description.substring(0, 100)}...` 
            : notification.description || 'Açıqlama yoxdur'}
        </p>
      </div>
      
      <div className="notification-actions-preview">
        <button className="btn-preview" onClick={(e) => { e.stopPropagation(); handleNotificationDetail(notification); }}>
          👁️ Ətraflı Bax
        </button>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="notifications-container">
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>Bildirişlər yüklənir...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="notifications-container">
        <div className="error-state">
          ⚠️ Xəta baş verdi: {typeof error === 'string' ? error : JSON.stringify(error)}
        </div>
      </div>
    );
  }

  return (
    <div className="notifications-container">
      {/* Header */}
      <div className="notifications-header">
        <h1 className="notifications-title">
          📢 Bildiriş İdarəetməsi
        </h1>
        <p className="notifications-subtitle">
          Sistem bildirişlərini göndərin və bütün yayım bildirişlərini idarə edin
        </p>
        <button 
          className="add-notification-btn"
          onClick={() => setShowSendForm(true)}
        >
          ➕ Yeni Bildiriş Göndər
        </button>
      </div>

      {/* Controls */}
      <div className="notifications-controls">
        <div className="search-sort-section">
          {/* Search */}
          <div className="search-input-container">
            <span className="search-icon">🔍</span>
            <input
              type="text"
              placeholder="Başlıq və ya açıqlama ilə axtar..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            {searchTerm && (
              <button onClick={handleClearSearch} className="clear-search-btn">✖️</button>
            )}
          </div>

          {/* Sort */}
          <div className="sort-controls">
            <select 
              value={sortBy} 
              onChange={(e) => setSortBy(e.target.value)}
              className="sort-select"
            >
              <option value="date">📅 Tarix</option>
              <option value="title">📝 Başlıq</option>
              <option value="id">🆔 ID</option>
            </select>
            <button 
              onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
              className={`sort-order-btn ${sortOrder}`}
            >
              {sortOrder === 'asc' ? '↑' : '↓'}
            </button>
          </div>
        </div>

        {/* Stats */}
        <div className="stats-section">
          <div className="stat-card">
            <div className="stat-number">{stats.total}</div>
            <div className="stat-label">Ümumi</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.filtered}</div>
            <div className="stat-label">Filtrlənmiş</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.today}</div>
            <div className="stat-label">Bu gün</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.thisWeek}</div>
            <div className="stat-label">Bu həftə</div>
          </div>
        </div>
      </div>

      {/* Search Info */}
      {searchTerm && (
        <div className="search-info">
          🔍 "{searchTerm}" üçün {filteredAndSortedNotifications.length} nəticə tapıldı
        </div>
      )}

      {/* Notifications Display */}
      {filteredAndSortedNotifications.length === 0 ? (
        <div className="empty-state">
          <div className="empty-icon">📢</div>
          <h3>Bildiriş tapılmadı</h3>
          <p>Hələ heç bir bildiriş göndərilməyib və ya axtarış kriteriyalarınıza uyğun nəticə yoxdur</p>
          <button 
            className="empty-action-btn"
            onClick={() => setShowSendForm(true)}
          >
            ➕ İlk Bildirişinizi Göndərin
          </button>
        </div>
      ) : (
        <div className="notifications-grid">
          {filteredAndSortedNotifications.map(renderNotificationCard)}
        </div>
      )}

      {/* Send Form Modal */}
      {showSendForm && (
        <div className="modal-overlay" onClick={() => setShowSendForm(false)}>
          <div className="send-form-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <div className="modal-title">
                <h2>📢 Yeni Bildiriş Göndər</h2>
                <button className="close-btn" onClick={() => setShowSendForm(false)}>❌</button>
              </div>
            </div>

            <form onSubmit={handleSend} className="send-form">
              <div className="form-group">
                <label htmlFor="title" className="form-label">📝 Başlıq</label>
                <input
                  id="title"
                  type="text"
                  placeholder="Bildiriş başlığını daxil edin..."
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="form-input"
                  required
                />
              </div>

              <div className="form-group">
                <label htmlFor="description" className="form-label">📄 Açıqlama</label>
                <textarea
                  id="description"
                  placeholder="Bildiriş açıqlamasını daxil edin..."
                  value={desc}
                  onChange={(e) => setDesc(e.target.value)}
                  className="form-textarea"
                  rows="4"
                  required
                />
              </div>

              <div className="form-actions">
                <button type="button" onClick={() => setShowSendForm(false)} className="btn btn-cancel">
                  ❌ Ləğv Et
                </button>
                <button type="submit" className="btn btn-send" disabled={!title.trim() || !desc.trim()}>
                  📤 Bildirişi Göndər
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Notification Detail Modal */}
      {showDetailModal && selectedNotification && (
        <div className="modal-overlay" onClick={() => setShowDetailModal(false)}>
          <div className="notification-detail-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <div className="modal-title">
                <h2>📢 {selectedNotification.title}</h2>
                <button className="close-btn" onClick={() => setShowDetailModal(false)}>❌</button>
              </div>
              <div className="notification-badges-row">
                <div className="status-badge active">📢 Göndərildi</div>
                <div className="notification-id-badge">ID: #{selectedNotification.id || 'N/A'}</div>
              </div>
            </div>

            <div className="modal-content">
              {/* Notification Info */}
              <div className="notification-info-section">
                <h3>📋 Bildiriş Məlumatları</h3>
                <div className="info-grid">
                  <div className="info-item">
                    <strong>📝 Başlıq:</strong> {selectedNotification.title}
                  </div>
                  <div className="info-item">
                    <strong>📄 Açıqlama:</strong> {selectedNotification.description || 'Açıqlama yoxdur'}
                  </div>
                  <div className="info-item">
                    <strong>📅 Göndərilmə tarixi:</strong> {formatDate(selectedNotification.createdAt || selectedNotification.date)}
                  </div>
                  <div className="info-item">
                    <strong>🆔 ID:</strong> {selectedNotification.id || 'N/A'}
                  </div>
                  {selectedNotification.type && (
                    <div className="info-item">
                      <strong>🏷️ Növ:</strong> {selectedNotification.type}
                    </div>
                  )}
                </div>
              </div>

              {/* Additional Details */}
              {(selectedNotification.recipients || selectedNotification.channels) && (
                <div className="additional-info-section">
                  <h3>🎯 Göndərim Məlumatları</h3>
                  <div className="info-grid">
                    {selectedNotification.recipients && (
                      <div className="info-item">
                        <strong>👥 Alıcılar:</strong> {selectedNotification.recipients}
                      </div>
                    )}
                    {selectedNotification.channels && (
                      <div className="info-item">
                        <strong>📡 Kanallar:</strong> {selectedNotification.channels}
                      </div>
                    )}
                    {selectedNotification.priority && (
                      <div className="info-item">
                        <strong>⚡ Prioritet:</strong> {selectedNotification.priority}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Full Description */}
              <div className="full-description-section">
                <h3>📝 Tam Açıqlama</h3>
                <div className="description-content">
                  {selectedNotification.description || 'Açıqlama məlumatı mövcud deyil'}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
